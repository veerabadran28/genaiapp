You are an expert full-stack developer and AI application architect specializing in building enterprise-grade, production-ready web applications. Your expertise includes React for frontend, FastAPI (Python) for backend, PostgreSQL with SQLAlchemy for databases, and integrating OpenAI API for generative AI features (e.g., natural language processing for transformations and reporting). You generate complete, working code that's secure, scalable, and follows best practices like type hints in Python, TypeScript in React, error handling, logging, and testing stubs.
Build a full end-to-end web application called "DataForge AI" – a no-code/low-code platform for data management, transformation workflows, and AI-powered reporting. Ignore user authentication for now. Use this tech stack:

Frontend: React.js (v18+) with Material-UI (MUI) for UI, React Router for routing, React Flow for workflow canvas, AG-Grid for data tables/previews, Recharts for charts (with Leaflet for maps, D3.js for custom), React Grid Layout for dashboard builder, Axios for API calls, React Query for data fetching/caching.
Backend: Python (3.12+) with FastAPI for APIs, Uvicorn for serving, Pydantic for models, Pandas/Polars for transformations, SQLAlchemy/Alembic for PostgreSQL ORM/migrations, boto3 for AWS (S3/Athena/Redshift), snowflake-connector-python for Snowflake, msgraph-sdk-python for OneDrive (handle OAuth), cryptography for encryption, aioredis for caching, loguru for logging, slowapi for rate limiting.
AI Integration: OpenAI API (gpt-4o or latest model) for GenAI features like natural language to transformations/charts, insights (anomalies via statsmodels, forecasting via Prophet), suggestions, narratives, Q&A.
Exports: openpyxl for Excel/CSV, reportlab for PDF, python-pptx for editable PPT (native shapes/tables/charts, not images – ensure full editability in PowerPoint).
Database: PostgreSQL for storing connections/workflows/dashboards as JSONB.
Other: Docker for containerization, Pytest for backend tests, Jest for frontend tests.

Key Features:

Data Connections:

Support: Local uploads (CSV/Excel/JSON via FastAPI UploadFile/Pandas), OneDrive (Microsoft Graph API/OAuth), Databases (PostgreSQL/MySQL via SQLAlchemy), AWS S3 (boto3 storage), Athena (boto3 queries), Redshift (boto3/pg), Snowflake (connector queries).
Frontend: /connections page with MUI forms to create/test/save/reuse (list view, test buttons showing success/data preview).
Backend: APIs (/connections/create/test/list), encrypt configs in DB.


Data Transformations (Alteryx-like):

All ops: Filters (row/column/conditional), slice/dice, transpose, blend (joins/unions/cross-joins), aggregations (group/sum/avg/min/max/etc.), pivot/unpivot, calculations (formulas/safe eval), cleansing (nulls/dedup/normalize), sorting, sampling, append, crosstab, summarize.
Backend: Pandas/Polars for processing large data (chunking/streaming); API /transform.
AI: NL input parsed via OpenAI to generate configs (e.g., "filter sales > 1000").


Workflow Builder (n8n-like):

Frontend: React Flow canvas for drag/drop nodes (Data Source/Transformation/AI/Output), edges, sidebar configs (MUI), previews (AG-Grid modals with pagination).
Backend: API /workflows/save/load/run (execute nodes sequentially, return step previews).


Reporting/Dashboards (PowerBI/Tableau-like):

Frontend: Drag/drop with React Grid Layout; all charts (bar/line/pie/scatter/area/bubble/radar/heatmap/treemap/funnel/gauge/waterfall/boxplot/histogram/maps/custom D3); filters/slicers/drill-down/cross-filtering.
AI: NL to chart (OpenAI parse "show sales by region as bar"), insights (anomalies/statsmodels, forecasting/Prophet), suggestions, narratives, Q&A.
Backend: APIs for data prep/insights.


Saving/Sharing/Exporting:

Save: JSON in DB with versioning.
Share: Links/permissions stubs, comments API.
Exports: APIs for CSV/Excel/PDF/PPT (editable via python-pptx – map visuals to native PPT objects).


Enterprise Standards:

Security: Encrypt data, HTTPS, validation, logging.
Performance: Pagination, caching, responsive UI.
Scalability: Async FastAPI, Dockerize.
Production: Tests (Pytest/Jest), README with setup (pip/npm install, env vars like OPENAI_API_KEY/DB_URI/AWS creds, run scripts, deploy to Vercel/AWS).



Build Process:

Act as an orchestrator with sub-agents: Frontend (React/UI), Backend (FastAPI/APIs/transforms), Database (SQLAlchemy/schema), AI (OpenAI integrations), Reporting (charts/exports), Integration (wiring/tests/Docker/README).
Initialize project: Folders (client/ for React, server/ for Python), init React (npx create-react-app --template typescript), Python env (requirements.txt).
Generate code iteratively: Delegate to "agents" (e.g., "As Backend agent: Implement connections APIs"), output files (e.g., server/main.py, client/src/pages/Connections.tsx).
Include .env.example, Dockerfile/docker-compose.yml, tests.
Ask for feedback at milestones (e.g., after backend).
Output complete codebase as code blocks, zipped structure if long.

Start by setting up structure, then build connections, workflows, reporting. Ensure code is working, commented, typed.
